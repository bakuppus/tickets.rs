use chrono::{DateTime, Utc};
use model::guild::{
    DefaultMessageNotifications, ExplicitContentFilterLevel, Guild, MFALevel, NsfwLevel,
    PremiumTier, VerificationLevel, WelcomeScreen,
};
use model::{ImageHash, PermissionBitSet, Snowflake};

#[derive(Debug)]
pub struct CachedGuild {
    pub name: String,
    pub icon: Option<ImageHash>,
    pub splash: Option<ImageHash>,
    pub discovery_splash: Option<ImageHash>,
    pub owner: Option<bool>,
    pub owner_id: Snowflake,
    pub permissions: Option<PermissionBitSet>,
    pub region: String,
    pub afk_channel_id: Option<Snowflake>,
    pub afk_timeout: u16,
    pub verification_level: VerificationLevel,
    pub default_message_notifications: DefaultMessageNotifications,
    pub explicit_content_filter: ExplicitContentFilterLevel,
    pub features: Vec<String>,
    pub mfa_level: MFALevel,
    pub application_id: Option<Snowflake>,
    pub widget_enabled: Option<bool>,
    pub widget_channel_id: Option<Snowflake>,
    pub system_channel_id: Option<Snowflake>,
    pub system_channels_flags: Option<u32>,
    pub rules_channel_id: Option<Snowflake>,
    pub joined_at: Option<DateTime<Utc>>,
    pub large: Option<bool>,
    pub unavailable: Option<bool>,
    pub member_count: Option<u32>,
    pub max_presences: Option<u32>,
    pub max_members: Option<u32>,
    pub vanity_url_code: Option<String>,
    pub description: Option<String>,
    pub banner: Option<ImageHash>,
    pub premium_tier: PremiumTier,
    pub premium_subscription_count: Option<u16>,
    pub preferred_locale: String,
    pub public_updates_channel_id: Option<Snowflake>,
    pub max_video_channel_users: Option<u8>,
    pub approximate_member_count: Option<u32>,
    pub approximate_presence_count: Option<u32>,
    pub welcome_screen: Option<WelcomeScreen>,
    pub nsfw_level: NsfwLevel,
}

impl From<Guild> for CachedGuild {
    fn from(other: Guild) -> Self {
        Self {
            name: other.name,
            icon: other.icon,
            splash: other.splash,
            discovery_splash: other.discovery_splash,
            owner: other.owner,
            owner_id: other.owner_id,
            permissions: other.permissions,
            region: other.region,
            afk_channel_id: other.afk_channel_id,
            afk_timeout: other.afk_timeout,
            verification_level: other.verification_level,
            default_message_notifications: other.default_message_notifications,
            explicit_content_filter: other.explicit_content_filter,
            features: other.features,
            mfa_level: other.mfa_level,
            application_id: other.application_id,
            widget_enabled: other.widget_enabled,
            widget_channel_id: other.widget_channel_id,
            system_channel_id: other.system_channel_id,
            system_channels_flags: other.system_channels_flags,
            rules_channel_id: other.rules_channel_id,
            joined_at: other.joined_at,
            large: other.large,
            unavailable: other.unavailable,
            member_count: other.member_count,
            max_presences: other.max_presences,
            max_members: other.max_members,
            vanity_url_code: other.vanity_url_code,
            description: other.description,
            banner: other.banner,
            premium_tier: other.premium_tier,
            premium_subscription_count: other.premium_subscription_count,
            preferred_locale: other.preferred_locale,
            public_updates_channel_id: other.public_updates_channel_id,
            max_video_channel_users: other.max_video_channel_users,
            approximate_member_count: other.approximate_member_count,
            approximate_presence_count: other.approximate_presence_count,
            welcome_screen: other.welcome_screen,
            nsfw_level: other.nsfw_level,
        }
    }
}
